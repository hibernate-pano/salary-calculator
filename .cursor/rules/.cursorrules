# 薪资计算器项目规则

## 代码规范
### 1. 命名规则
- 类型使用大驼峰命名法
- 变量和函数使用小驼峰命名法
- 常量使用大写下划线命名法
- 私有成员以下划线开头

### 2. 文件组织
- 每个文件只包含一个主要类型
- 相关类型放在同一个文件中
- 使用扩展来组织代码
- 保持文件结构清晰

### 3. 注释规范
- 使用文档注释说明公共接口
- 使用行注释解释复杂逻辑
- 保持注释简洁明了
- 及时更新注释

## 架构规则
### 1. MVVM 模式
- View 只负责 UI 展示
- ViewModel 处理业务逻辑
- Model 只包含数据结构
- 使用依赖注入管理依赖

### 2. 数据流
- 单向数据流
- 使用 Combine 处理异步
- 避免状态混乱
- 保持数据一致性

### 3. 组件通信
- 优先使用属性传递
- 必要时使用环境对象
- 避免全局状态
- 保持组件独立

## 性能规则
### 1. 内存管理
- 及时释放资源
- 避免循环引用
- 使用适当的数据结构
- 控制内存使用

### 2. 计算优化
- 缓存计算结果
- 避免重复计算
- 使用异步处理
- 优化算法复杂度

### 3. UI 性能
- 减少视图层级
- 优化渲染性能
- 使用适当的布局
- 避免不必要的更新

## 安全规则
### 1. 数据安全
- 加密敏感数据
- 安全存储凭证
- 安全传输数据
- 定期清理缓存

### 2. 用户隐私
- 最小化数据收集
- 安全处理用户信息
- 提供隐私选项
- 遵守隐私法规

### 3. 错误处理
- 优雅处理错误
- 提供用户反馈
- 记录错误日志
- 防止数据丢失

## 测试规则
### 1. 单元测试
- 测试核心逻辑
- 模拟外部依赖
- 覆盖边界条件
- 保持测试独立

### 2. 集成测试
- 测试组件交互
- 验证数据流
- 测试错误处理
- 模拟用户操作

### 3. UI 测试
- 测试关键流程
- 验证界面状态
- 测试用户交互
- 检查响应性

## 文档规则
### 1. 代码文档
- 文档化公共接口
- 说明复杂逻辑
- 提供使用示例
- 保持文档更新

### 2. 项目文档
- 记录架构决策
- 说明开发流程
- 提供部署指南
- 维护更新日志

### 3. 用户文档
- 提供使用说明
- 说明功能特性
- 解答常见问题
- 提供故障排除

## 版本控制
### 1. 分支管理
- 主分支保持稳定
- 功能分支开发
- 及时合并代码
- 解决冲突

### 2. 提交规范
- 清晰的提交信息
- 相关的改动
- 避免大提交
- 保持提交原子性

### 3. 版本发布
- 版本号规范
- 更新说明
- 测试验证
- 用户通知

## 开发流程
### 1. 功能开发
- 需求分析
- 设计实现
- 代码审查
- 测试验证

### 2. 问题修复
- 问题复现
- 原因分析
- 解决方案
- 验证修复

### 3. 优化改进
- 性能分析
- 优化方案
- 效果验证
- 持续改进 